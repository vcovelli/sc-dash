services:
  mongo:
    image: mongo:7
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo:/data/db
      
  postgres:
    image: postgres:13
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${APP_DB_NAME}
      POSTGRES_USER: ${APP_DB_USER}
      POSTGRES_PASSWORD: ${APP_DB_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./airflow/init-airflow.sql:/docker-entrypoint-initdb.d/init-airflow.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${APP_DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    entrypoint: /app/backend_entrypoint.sh
    environment:
      PG_USER: ${APP_DB_USER}
      PG_PASSWORD: ${APP_DB_PASSWORD}
      PG_DATABASE: ${APP_DB_NAME}
    volumes:
      - ./backend:/app
      - ./scripts:/app/scripts
      - ./.env:/app/.env 
      - ./user_schemas:/app/user_schemas
    ports:
      - "8000:8000" # Django port
    depends_on:
      - postgres
      - mongo
    env_file:
      - .env

  airflow-webserver:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@postgres/${AIRFLOW_DB_NAME}
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "True"
      BACKEND_API_URL: http://backend:8000
    entrypoint: /opt/airflow/airflow_entrypoint.sh
    volumes:
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./backend/backend_scripts:/opt/airflow/backend_scripts
      - ./scripts:/opt/airflow/scripts
      - ./datasets:/opt/airflow/datasets
      - ./user_schemas:/opt/airflow/user_schemas
      - ./.env:/app/.env
      - ./airflow/airflow-requirements.txt:/opt/airflow/airflow-requirements.txt
    ports:
      - "8080:8080" # Airflow webserver port
    depends_on:
      postgres:
        condition: service_healthy

  airflow-scheduler:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@postgres/${AIRFLOW_DB_NAME}
      BACKEND_API_URL: http://backend:8000
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./backend/backend_scripts:/opt/airflow/backend_scripts
      - ./scripts:/opt/airflow/scripts
      - ./datasets:/opt/airflow/datasets
      - ./user_schemas:/opt/airflow/user_schemas
      - ./airflow/airflow-requirements.txt:/opt/airflow/airflow-requirements.txt
    command: scheduler

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BROWSER_REDIRECT_URL: https://minio.supplywise.ai/console/
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001" 
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  ai:
    image: ollama/ollama
    container_name: ai
    restart: always
    ports:
      - "11434:11434"
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - OLLAMA_LLM_LIBRARY=cuda
    volumes:
      - ai_data:/root/.ai
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434"]
      interval: 30s
      timeout: 10s
      retries: 5

  query-agent:
    build:
      context: ./query-agent
    container_name: query-agent
    ports:
      - "8002:8002"
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${APP_DB_NAME}
      POSTGRES_USER: ${APP_DB_USER}
      POSTGRES_PASSWORD: ${APP_DB_PASSWORD}
    depends_on:
      - backend
      - postgres

  #spark:
    #image: bitnami/spark:latest
    #container_name: spark
    #ports:
      #- "7077:7077"     # Spark master port
      #- "8081:8080"     # Spark web UI
    #environment:
      #- SPARK_MODE=master
    #volumes:
      #- spark-data:/bitnami/spark
    #networks:
      #- default

  #spark-worker:
    #image: bitnami/spark:latest
    #container_name: spark-worker
    #environment:
      #- SPARK_MODE=worker
      #- SPARK_MASTER_URL=spark://spark:7077
    #depends_on:
      #- spark
    #networks:
      #- default

volumes:
  mongo:
  pg_data:
  airflow_logs:
  #spark-data:
  minio_data:
  ai_data:
